/*
*
* A Game Of Hex
*
* By: Warren Burke
*
*/


#include "HexGameEngine.h"


pair<int, int> HexGameEngine::colorCellNeighbor(int cell)
{
	int row{-1}, col{-1};

	auto bSize{ board.getSize() };
	
	vector<int> neighbors;
	
	if(computer.getColor() == hexColors::BLUE)
		neighbors = board.getBlueNeighbors(cell);
	
	if(computer.getColor() == hexColors::RED)
		neighbors = board.getRedNeighbors(cell);
	
	for(auto& N: neighbors)
	{
		row = N / bSize;
		col = N % bSize;
		
		if( board.getCellColor(row, col) == hexColors::NONE )
		{
			board.setCellColor(row, col, computer.getColor(), computer);
			break;
		}
		
		row = col = -1;
	}

	return pair<int, int>{row, col};
} 

pair<int, int> HexGameEngine::findLongestPath(int cell)
{
	pair<int, int> endpoints{-1, -1};
	
	vector<int> cells = computer.getCurrentCells(cell);
	
	if( cells.size() < 2 )
		return endpoints;
		
	int prevMax, maxPath{0}, bNode, eNode;

	int pSize; // path size

	auto itr = cells.begin(); itr++;

	for(auto& B: cells)
	{ 
		for(auto E = itr; E < cells.end(); E++)
		{
			if( B != *E)
			{ 
				pSize = computer.findPathSize(B, *E);
				prevMax = maxPath; maxPath = max(maxPath, pSize);

				if(maxPath > prevMax)
				{
						endpoints.first = B;
						endpoints.second = *E;
				}
			}
		}
		itr++;
	}

	return endpoints;
}

pair<int, int> HexGameEngine::extendLongestPath()
{
	static int prevCell{-1};
	
	auto bSize{ board.getSize() };
	
	int row, col;
	
	//if(prevCell > 0)
	if(computer.getCellCount() > 1)
	{
		pair<int, int> endpoints{ findLongestPath(prevCell) };
		
		pair<int, int> position; position = colorCellNeighbor(endpoints.second);
		
		prevCell = endpoints.second;
		
		row = position.first; col = position.second;
		
		if(row == -1 && col == -1)
		{
			position = colorCellNeighbor(endpoints.first);

			prevCell = endpoints.first;
		
			row = position.first; col = position.second;
		}
	}
	else  
	{
		if(computer.getCellCount() == 1)
		{
			pair<int, int> position = colorCellNeighbor(prevCell);
			row = position.first; col = position.second;
		}
		else // if computer has no cells, then check to see if center cell, is colored, and if not color it
		{
			row = col = bSize / 2;
		
				// if center cell is not colored, color it, else color a non-colored neighbor
			if( board.getCellColor(row, col) == hexColors::NONE )
			{
				board.setCellColor(row, col, computer.getColor(), computer);
				prevCell = row*bSize + col;
			}
			else 
			{
				int center = row*bSize + col;
				pair<int, int> position = colorCellNeighbor(center); // all neighbors could be colored
				row = position.first; col = position.second;
			
				prevCell = row*bSize + col;
			}
		}
	}
	
	return pair<int, int>{row,col};
}

	// generates moves via monte carlo simulation
int HexGameEngine::genMonteMove()
{
	int size{ board.getSize() }, cells{size*size};
	//int row{-5}, col{-5};
	
	vector<int> vacancies;
	
	for(int c = 0; c < cells; c++)
	{
		if( board.getCellColor(c) == hexColors::NONE )
			vacancies.push_back(c);
	}
	
	hexColors simColor = computer.getColor();
	
	HexPlayer simPlayer(computer);
	HexBoard simBoard(board);
	
	vector<int> simVacancies = vector<int>();
	
	random_device rd{"hw"};
	
	hexColors current{ human.getColor() };
	
	unordered_map<int,int> winMap; // frequency map of winnning moves
	
	for(auto& c: vacancies)
	{
		for(int reps = 0; reps < 1000; reps++)
		{
			simBoard.setCellColor(c, simColor); // cell currently under consideration
		
			simVacancies = vacancies;
			remove(simVacancies.begin(), simVacancies.end(), c); // remove cell currently under consideration
		
			shuffle(simVacancies.begin(), simVacancies.end(), rd);

			for(auto& sc: simVacancies)
			{
				simBoard.setCellColor(sc, current);
			
				if( current == human.getColor() )
					current = simColor;
				else
				{
					vector<int> neighbors = simBoard.getCellNeighbors(sc);
							
					for(auto& N: neighbors) // update computer sim player graph
					{
						if( simBoard.getCellColor(N) == simPlayer.getColor() )
							simPlayer.connectCells(sc, N);
					}
					current = human.getColor();
				}
			}

			if( simPlayer.win() )
				++winMap[c];

				// reset board & player for next round of simulation
			simPlayer = computer;
			simBoard = board;
		}
	}
	
	auto lessThan = [](const pair<int, int> &e1, const pair<int, int> &e2)->bool { return e1.second < e2.second; };
	
	auto mapMax = max_element(winMap.begin(), winMap.end, lessThan); // get move with the most wins
	
	return mapMax->first;
}

void HexGameEngine::playComputer()
{
	ui->displayMsg("\nComputer Takes It's Turn\n");
	
	// pair<int, int> position { extendLongestPath() };
	
	int cell { genMonteMove() };
	
	// auto row{ position.first }, col{ position.second };
	
	// auto bSize{ board.getSize() };

		// create edge between cell neighbors that are the same color
	//int cell{ row*bSize + col };
	
	board.setCellColor(cell, computer.getColor(), computer);

	vector<int> neighbors = board.getCellNeighbors(cell);
		
		// update computer player graph
	for(auto& N: neighbors)
	{
		if( board.getCellColor(N) == computer.getColor() )
			computer.connectCells(cell, N);
	}
	
	if( computer.win() )
	{
		winner = &computer;
		done = true;
		currentPlayer = nullptr;
	}
	else
		currentPlayer = &human; // computer just played so human plays next
}

