#include "HexGameEngine.h"



void HexGameEngine::updateGame()
{
	if(currentPlayer == &computer)
	{
		cout << "\nComputer Takes It's Turn\n";
		
		int pc = currentPlayer->getPrevCell();
		
		bool noColor{true};
		
		int max{0}; int mEnd; // node at end of longest path
		int pSize; // path size
		
			// if computer has a previously colored cell, find longest path from that cell, and color a neighbor at end of longest path
		if(pc >= 0)
		{
			//vector<int> endNeighbors; // neighbors of node at end of longest path
			
			vector<int> cpNodes = currentPlayer->getGraph().getNodes(); // all nodes of computer player's graph
			
			for(auto& N: cpNodes)
			{
				if(pc != N)
				{
					pSize = currentPlayer->getPath().getPathSize(pc, N);
					
					if(pSize > max)
					{
						max = pSize;
						mEnd = N;
					}
				}
			}
			
			if(max == 0) // if there are no connected nodes, connect an uncolored neighbor
			{
				vector<int> pcNeighbors = board.getCellNeighbors(pc, 1, true);
				
				for(auto& N: pcNeighbors)
				{
					if(N >= 0)
					{
						row = N / board.getSize();
						col = N % board.getSize();
					
						if( board.getCellColor(row, col) == hexColors::NONE )
						{
							board.setCellColor( row, col, currentPlayer->getColor() );
							currentPlayer->setPrevCell( row*board.getSize() + col );
							break;
						//currentPlayer = &human;
						//return;
						}
					}
				}
			}
			else
			{			// neighbors of node at end of longest path
				vector<int> endNeighbors = board.getCellNeighbors(mEnd, 1, true);
			
				for(auto& N: endNeighbors)
				{
					if(N >= 0)
					{
						row = N / board.getSize();
						col = N % board.getSize();
				
						if( board.getCellColor(row, col) == hexColors::NONE )
						{
							board.setCellColor( row, col, currentPlayer->getColor() );
							currentPlayer->setPrevCell( row*board.getSize() + col );
							//currentPlayer = &human;
							break;
						}
					}
				}
			}
		}
		else
		{
			row = col = board.getSize() / 2;
			
				// if center cell is not colored, color it, else color a non-colored neighbor, this is the first colored cell
			if( board.getCellColor(row, col) == hexColors::NONE )
			{
				board.setCellColor( row, col, currentPlayer->getColor() );
				currentPlayer->setPrevCell( row*board.getSize() + col );
				//currentPlayer = &human;
				//return;
			}
			else 
			{
				int center = row*board.getSize() + col;
				vector<int> centerNeighbors = board.getCellNeighbors(center, 1, true);
				
				for(auto& N: centerNeighbors)
				{
					if(N >= 0)
					{
						row = N / board.getSize();
						col = N % board.getSize();
					
						if( board.getCellColor(row, col) == hexColors::NONE )
						{
							board.setCellColor( row, col, currentPlayer->getColor() );
							currentPlayer->setPrevCell( row*board.getSize() + col );
							//currentPlayer = &human;
							break;
						}
					}
				}
			}
		}
				
		//board.setCellColor( row, col, currentPlayer->getColor() );
		
			// create edge between cell neighbors that are the same color
		int n{ row*board.getSize() + col };
		
		vector<int> neighbors = board.getCellNeighbors(n, 1, true);
		
		for(auto& N: neighbors)
		{
			if(N >= 0)
			{
				if( board.getCellColor(N) == currentPlayer->getColor() )
					currentPlayer->getGraph().addEdge(n, N, 1);
			}
		}
	}
	else
	{
		board.setCellColor( row, col, currentPlayer->getColor() );
		
			// create edge between cell neighbors that are the same color
		int n{ row*board.getSize() + col };
		
		vector<int> neighbors = board.getCellNeighbors(n, 1, true);
		
		for(auto& N: neighbors)
		{
			if(N >= 0)
			{
				if( board.getCellColor(N) == currentPlayer->getColor() )
					currentPlayer->getGraph().addEdge(n, N, 1);
			}
		}
	}
	
	if(currentPlayer == &computer)
		currentPlayer = &human;
	else
		currentPlayer = &computer;
	
	//board.setCellColor( hRow, hCol, human.getColor() );
	//board.setCellColor( row, col, computer.getColor() )
}

void HexGameEngine::processInput()
{
	hexColors cc; // cell color
	
	bool legal; int size{ board.getSize() - 1 };
	 
	do {
		legal = true;
		
		cout << "\nEnter your move: "; cin >> row >> col;
		
		if( row < 0 || row > size )
		{
			cout << "ILLEGAL MOVE!\n";
			legal = false;
			continue;
		}
		
		if( col < 0 || col > size )
		{
			cout << "ILLEGAL MOVE!\n";
			legal = false;
			continue;
		}
		
		cc = board.getCellColor(row, col);
		
		if(cc != hexColors::NONE)
		{
			cout << "ILLEGAL MOVE!\n";
			legal = false;
		}
		
	} while(!legal);
}

void HexGameEngine::generateOutput()
{
	int bSize = board.getSize();
	hexColors cc; // board cell color
	
	cout << endl;
	
	for(int r = 0; r < bSize; r++)
	{
		for(int c = 0; c < bSize; c++)
		{
			cc = board.getCellColor(r, c);
			
			switch(cc)
			{
				case hexColors::NONE:
					cout << "[" << r << ", " << c << ", NONE]\t";
				break;
				
				case hexColors::BLUE:
					cout << "[" << r << ", " << c << ", BLUE\u2650]\t";
				break;
				
				case hexColors::RED:
					cout << "[" << r << ", " << c << ", RED\u2648]\t";
				break;
			}
		}
		
		cout << endl;
	}
	
	char ans; 
	cout << "\nContinue game?(y/n) "; cin >> ans;
	
	if (ans != 'y') run = false;
}

void HexGameEngine::runLoop()
{
	if(!isInitialized)
		return;
		
	while(run)
	{
			// if computer is currentPlayer then do not get input from user
		if( currentPlayer == &human )
			processInput(); // check for legality of a move
		
		updateGame(); // update player graphs and gameBoard
		generateOutput();
	}
}

void HexGameEngine::shutdown()
{
	if(!isInitialized)
		cout << "\nGame Engine Was Not Initialized" << endl;
}

bool HexGameEngine::initialize()
{	
	int player;
	
	do {
			cout << "\n1) Red Player\n2) Blue Player\nEnter 1 or 2: ";
			cin >> player;
	} while( player != 1 && player != 2 );
	
	int size{ board.getSize() };
	
	if (player == 1)
	{
		human = HexPlayer(hexColors::RED, size);
		computer = HexPlayer(hexColors::BLUE, size);
		currentPlayer = &computer;
	}
	else
	{
		human = HexPlayer(hexColors::BLUE, size);
		currentPlayer = &human;
		computer = HexPlayer(hexColors::RED, size);
	}
	
	isInitialized = true;
	
	return true;
}

