/*
*
* A Game Of Hex
*
* By: Warren Burke
*
*/


#include "HexGameEngine.h"


pair<int, int> HexGameEngine::colorCellNeighbor(int cell)
{
	int row{-1}, col{-1};

	auto bSize{ board.getSize() };
	
	vector<int> neighbors;
	
	if(computer.getColor() == hexColors::BLUE)
		neighbors = board.getBlueNeighbors(cell);
	
	if(computer.getColor() == hexColors::RED)
		neighbors = board.getRedNeighbors(cell);
	
	for(auto& N: neighbors)
	{
		row = N / bSize;
		col = N % bSize;
		
		if( board.getCellColor(row, col) == hexColors::NONE )
		{
			board.setCellColor(row, col, computer.getColor(), computer);
			break;
		}
		
		row = col = -1;
	}

	return pair<int, int>{row, col};
} 

pair<int, int> HexGameEngine::findLongestPath(int cell)
{
	pair<int, int> endpoints{-1, -1};
	
	vector<int> cells = computer.getCurrentCells(cell);
	
	if( cells.size() < 2 )
		return endpoints;
		
	int prevMax, maxPath{0}, bNode, eNode;

	int pSize; // path size

	auto itr = cells.begin(); itr++;

	for(auto& B: cells)
	{ 
		for(auto E = itr; E < cells.end(); E++)
		{
			if( B != *E)
			{ 
				pSize = computer.findPathSize(B, *E);
				prevMax = maxPath; maxPath = max(maxPath, pSize);

				if(maxPath > prevMax)
				{
						endpoints.first = B;
						endpoints.second = *E;
				}
			}
		}
		itr++;
	}

	return endpoints;
}

pair<int, int> HexGameEngine::extendLongestPath()
{
	static int prevCell{-1};
	
	auto bSize{ board.getSize() };
	
	int row, col;
	
	//if(prevCell > 0)
	if(computer.getCellCount() > 1)
	{
		pair<int, int> endpoints{ findLongestPath(prevCell) };
		
		pair<int, int> position; position = colorCellNeighbor(endpoints.second);
		
		prevCell = endpoints.second;
		
		row = position.first; col = position.second;
		
		if(row == -1 && col == -1)
		{
			position = colorCellNeighbor(endpoints.first);

			prevCell = endpoints.first;
		
			row = position.first; col = position.second;
		}
	}
	else  
	{
		if(computer.getCellCount() == 1)
		{
			pair<int, int> position = colorCellNeighbor(prevCell);
			row = position.first; col = position.second;
		}
		else // if computer has no cells, then check to see if center cell, is colored, and if not color it
		{
			row = col = bSize / 2;
		
				// if center cell is not colored, color it, else color a non-colored neighbor
			if( board.getCellColor(row, col) == hexColors::NONE )
			{
				board.setCellColor(row, col, computer.getColor(), computer);
				prevCell = row*bSize + col;
			}
			else 
			{
				int center = row*bSize + col;
				pair<int, int> position = colorCellNeighbor(center); // all neighbors could be colored
				row = position.first; col = position.second;
			
				prevCell = row*bSize + col;
			}
		}
	}
	
	return pair<int, int>{row,col};
}

pair<int, int> HexGameEngine::makeWinMove(HexPlayer player)
{
	auto bSize{ board.getSize() };
	
	int row{-1}, col{-1};
	
	auto color = player.getColor();
	
	bool first{true}, second{false}, pathFound{false};
	//if(computer.getColor() == hexColors::BLUE)
	do
	{	
		int start, end, delta;
		
		int pStart, pEnd;
		
		array<sides, 2> sideAR;
		
		if(color == hexColors::BLUE)
		{
			if(first) // top
			{
				start = bSize; end = 2*bSize; delta = 1;
				
				pStart = bSize*bSize - bSize; pEnd = bSize*bSize;
				
				first = false; second = true;
				
				sideAR[0] = sides::UL; sideAR[1] = sides::UR; 
			}
			
			if(second) // bottom
			{
				start = (bSize - 2) * bSize; end = start + bSize - 1; delta = 1;
				
				pStart = 0; pEnd = bSize;
				
				sideAR[0] = sides::LL; sideAR[1] = sides::LR; 
			}
		}
		
		if(color == hexColors::RED)
		{
			if(first) // left
			{
				start = 1; end = bSize*bSize - (bSize - 1); delta = 7;
				
				pStart = bSize - 1; pEnd = bSize*bSize;
				
				first = false; second = true;
				
				sideAR[0] = sides::L; sideAR[1] = sides::LL; 
			}
			
			if(second) // right
			{
				start = bSize - 2; end = bSize*bSize - 2; delta = 7;
				
				pStart = 0; pEnd = bSize*bSize - bSize;
				
				sideAR[0] = sides::R; sideAR[1] = sides::UR; 
			}
		}
		
		for(auto c{start}; c < end; c += delta) // iterate through second row of cells
		{	
			if(player.getCurrentCells().count(c) == 1) // is a cell from second row a computer cell
			{
				auto ulColor = board.getCellColor( board.getCellNeighbor(c, sideAR[0]) );
				auto urColor = board.getCellColor( board.getCellNeighbor(c, sideAR[1]) );
				
					// if cell from second row is a computer cell check it's upper edge neighbors
				if(ulColor == hexColors::NONE || urColor == hexColors::NONE)
				{
						// if an upper edge neighbor is uncolored, see if there's a path to a cell on the bottom edge
					for(auto be{pStart}; be < pEnd; be++)
					{
						pathFound = player.hasPath(c, be);
						
						if(pathFound)
							break;
					}
				}
			}
				// if there is a path to a bottom edge cell, color edge neighbor of second row cell
			if(pathFound)
			{
				auto ulColor = board.getCellColor( board.getCellNeighbor(c, sideAR[0]) );
				auto urColor = board.getCellColor( board.getCellNeighbor(c, sideAR[1]) );
				
				if(ulColor == hexColors::NONE) //|| urColor == hexColors::NONE)
				{
					auto ulNeighbor = board.getCellNeighbor(c, sideAR[0]);
					
					row = ulNeighbor / bSize; col = ulNeighbor % bSize;
					
					board.setCellColor(row, col, color, player);
				}
				else
				{
					auto urNeighbor = board.getCellNeighbor(c, sideAR[1]);
					
					row = urNeighbor / bSize; col = urNeighbor % bSize;
					
					board.setCellColor(row, col, color, player);
				}
				
				break;
			}
		}
	}
	while(!pathFound || !second);
	
	return pair<int, int>{row,col};
}

void HexGameEngine::playComputer()
{
	cout << "\nComputer Takes It's Turn\n";
	
	//static int prevCell{-1};
	
	pair<int, int> position { extendLongestPath() };
	
	auto row{ position.first }, col{ position.second };
	
	auto bSize{ board.getSize() };

		// create edge between cell neighbors that are the same color
	int cell{ row*bSize + col };

	vector<int> neighbors = board.getCellNeighbors(cell);
		
	for(auto& N: neighbors)
	{
		if( board.getCellColor(N) == computer.getColor() )
			computer.connectCells(cell, N);
	}
	
	if( computer.win() )
	{
		winner = &computer;
		run = false;
		currentPlayer = nullptr;
	}
	else
		currentPlayer = &human; // computer just played so human plays next
}

